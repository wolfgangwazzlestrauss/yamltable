{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"YamlTable \u00b6 YamlTable is a Python command line utility for working with YAML files organized similar to a relational database table. It supports YAML files organized as a list of dictionaries, which share key names and value types. YamlTable provides commands for listing, searching, sorting, etc. data from the supported files. Supported YAML File Organizations \u00b6 YamlTable works with YAML files organized as a list of dictionaries with similar key names and value types. 1 2 3 4 5 6 - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances The JSON schema support is included for YAML files organized as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 schema : $schema : http://json-schema.org/draft-07/schema# description : pipx package metadata schema type : object properties : name : type : string pattern : \"^[\\\\w-]+$\" description : type : string website : type : string required : - name - description - website additionalProperties : false rows : - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances Getting Started \u00b6 Installation \u00b6 YamlTable can be installed for Python 3.6+ with pipx . 1 pipx install yamltable To reuse its library functions install with pip . 1 pip install --user yamltable Commands \u00b6 YamlTable provides the following commands for working with YAML files: list : list dictionary key values search : search dictionaries by key and value sort : sort dictionaries by key and value validate : validate that dictionaries conform to the given JSON schema Contributing \u00b6 Since YamlTable is in an early development phase, it is not currently open to contributors. License \u00b6 Licensed under the MIT license.","title":"Home"},{"location":"#yamltable","text":"YamlTable is a Python command line utility for working with YAML files organized similar to a relational database table. It supports YAML files organized as a list of dictionaries, which share key names and value types. YamlTable provides commands for listing, searching, sorting, etc. data from the supported files.","title":"YamlTable"},{"location":"#supported-yaml-file-organizations","text":"YamlTable works with YAML files organized as a list of dictionaries with similar key names and value types. 1 2 3 4 5 6 - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances The JSON schema support is included for YAML files organized as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 schema : $schema : http://json-schema.org/draft-07/schema# description : pipx package metadata schema type : object properties : name : type : string pattern : \"^[\\\\w-]+$\" description : type : string website : type : string required : - name - description - website additionalProperties : false rows : - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances","title":"Supported YAML File Organizations"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"YamlTable can be installed for Python 3.6+ with pipx . 1 pipx install yamltable To reuse its library functions install with pip . 1 pip install --user yamltable","title":"Installation"},{"location":"#commands","text":"YamlTable provides the following commands for working with YAML files: list : list dictionary key values search : search dictionaries by key and value sort : sort dictionaries by key and value validate : validate that dictionaries conform to the given JSON schema","title":"Commands"},{"location":"#contributing","text":"Since YamlTable is in an early development phase, it is not currently open to contributors.","title":"Contributing"},{"location":"#license","text":"Licensed under the MIT license.","title":"License"},{"location":"src/developer/","text":"","title":"Developer Guide"},{"location":"src/developer/roadmap/","text":"","title":"Roadmap"},{"location":"src/reference/","text":"API Reference \u00b6 While YamlTable was designed for command line usage, its library functions also expose helpful functionality. This page gives an overview of all YamlTable classes, functions and methods. Command line interface for sorting YAML files. dependencies ( unsorted , depends , name ) \u00b6 Show source code in yamltable/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def dependencies ( unsorted : Sequence [ Row ], depends : str , name : str ) -> List [ Row ]: \"\"\"Sort rows based on the dependencies found in key. Args: unsorted: Rows to sort. depends: Dictionary key whose values are other dictionary dependencies. name: Foreign key for dependencies. Raises: ValueError: If rows contain circular requirements. Returns: Rows sorted by requirements. \"\"\" sorted_ : List [ Row ] = [] while unsorted : # Find rows containing only dependencies in sorted_. names = [ pkg [ name ] for pkg in sorted_ ] rows = [ ( idx , pkg ) for idx , pkg in enumerate ( unsorted ) if set ( pkg [ depends ]) . issubset ( names ) ] if rows : idxs , pkgs = zip ( * rows ) # Append found rows to sorted_ and remove them from unsorted. sorted_ += pkgs unsorted = [ elem for idx , elem in enumerate ( unsorted ) if idx not in idxs ] else : # If no rows are found then there exist circular dependencies. raise ValueError ( \"encountered circular dependencies.\" ) return sorted_ Sort rows based on the dependencies found in key. Parameters Name Type Description Default unsorted Sequence[Dict[str, Any]] Rows to sort. required depends str Dictionary key whose values are other dictionary dependencies. required name str Foreign key for dependencies. required Exceptions Type Description ValueError If rows contain circular requirements. Returns Type Description List[Dict[str, Any]] Rows sorted by requirements. read ( stream ) \u00b6 Show source code in yamltable/__init__.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def read ( stream : Union [ IO [ str ], pathlib . Path , str ] ) -> Tuple [ List [ Row ], Optional [ Schema ]]: \"\"\"Read data from YAML file. Args: stream: YAML text, text I/O stream, or file path. Raises: FileNotFoundError: If unable to find file path. TypeError: If file is not organized as a list. Returns: YAML data. \"\"\" if isinstance ( stream , pathlib . Path ): stream = stream . read_text () try : data = yaml . safe_load ( stream ) except ( yaml . scanner . ScannerError , yaml . parser . ParserError ) as xcpt : raise TypeError ( f \"invalid YAML file: { xcpt } \" ) if isinstance ( data , list ): return data , None elif isinstance ( data , dict ): try : return data [ \"rows\" ], data [ \"schema\" ] except KeyError : raise TypeError ( \"YAML file does not have a schema and rows organization\" ) else : raise TypeError ( \"YAML file is not organized in a tabular format\" ) Read data from YAML file. Parameters Name Type Description Default stream Union[IO[str], pathlib.Path, str] YAML text, text I/O stream, or file path. required Exceptions Type Description FileNotFoundError If unable to find file path. TypeError If file is not organized as a list. Returns Type Description Tuple[List[Dict[str, Any]], Union[Dict[str, Any], NoneType]] YAML data. search ( key , val , rows ) \u00b6 Show source code in yamltable/__init__.py 91 92 93 94 95 96 97 98 99 100 101 102 def search ( key : str , val : Any , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Search dictionaries by key and value. Args: key: Search key. val: Key comparison value. rows: Dictionaries to search. Returns: Matching dictionaries. \"\"\" return [ row for row in rows if key in row and row [ key ] == val ] Search dictionaries by key and value. Parameters Name Type Description Default key str Search key. required val Any Key comparison value. required rows Iterable[Dict[str, Any]] Dictionaries to search. required Returns Type Description List[Dict[str, Any]] Matching dictionaries. sort ( key , rows ) \u00b6 Show source code in yamltable/__init__.py 105 106 107 108 109 110 111 112 113 114 115 def sort ( key : str , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Sort dictionaries based on value for supplied key name. Args: key: Search key. rows: Dictionaries to sort. Returns: List of sorted dictionaries. \"\"\" return sorted ( rows , key = lambda row : row [ key ]) Sort dictionaries based on value for supplied key name. Parameters Name Type Description Default key str Search key. required rows Iterable[Dict[str, Any]] Dictionaries to sort. required Returns Type Description List[Dict[str, Any]] List of sorted dictionaries. validate ( rows , schema ) \u00b6 Show source code in yamltable/__init__.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def validate ( rows : Iterable [ Row ], schema : Optional [ Schema ] ) -> Tuple [ bool , int , str ]: \"\"\"Check that each row satisfies the schema. Args: rows: Dictionaries to validate. schema: JSON schema for validation. Returns: Whether all rows are valid, invalid row index or -1, invalid error message. \"\"\" try : validator = fastjsonschema . compile ( schema ) except ( fastjsonschema . JsonSchemaDefinitionException , TypeError ) as xcpt : return False , - 1 , f \"invalid schema: { xcpt } \" for idx , row in enumerate ( rows ): try : validator ( row ) except fastjsonschema . JsonSchemaException as xcpt : return False , idx , str ( xcpt ) return True , - 1 , \"\" Check that each row satisfies the schema. Parameters Name Type Description Default rows Iterable[Dict[str, Any]] Dictionaries to validate. required schema Optional[Dict[str, Any]] JSON schema for validation. required Returns Type Description Tuple[bool, int, str] Whether all rows are valid, invalid row index or -1, invalid error message. write ( file_path , rows , schema = None , sort_keys = False ) \u00b6 Show source code in yamltable/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def write ( file_path : pathlib . Path , rows : List [ Row ], schema : Optional [ Schema ] = None , sort_keys : bool = False , ) -> None : \"\"\"Write data to YAML file. Args: file_path: YAML file path. rows: List of dictionaries to write. schema: JSON schema dictionary. sort_keys: Whether to sort row keys. \"\"\" if schema is None : with open ( file_path , \"w\" ) as handle : yaml . dump ( rows , handle , sort_keys = sort_keys ) else : data = { \"schema\" : schema , \"rows\" : rows } with open ( file_path , \"w\" ) as handle : yaml . dump ( data , handle , sort_keys = sort_keys ) Write data to YAML file. Parameters Name Type Description Default file_path Path YAML file path. required rows List[Dict[str, Any]] List of dictionaries to write. required schema Optional[Dict[str, Any]] JSON schema dictionary. None sort_keys bool Whether to sort row keys. False __main__ \u00b6 Command line interface for YamlTable. See https://docs.python.org/3/using/cmdline.html#cmdoption-m for why module is named main .py. index_ ( index , file_path =< typer . models . ArgumentInfo object at 0x7f89d4a975c0 > ) \u00b6 Show source code in yamltable/__main__.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 @app . command ( name = \"index\" ) def index_ ( index : int , file_path : pathlib . Path = FileArg ) -> None : \"\"\"Get row at INDEX in FILE_PATH.\"\"\" rows , _ = load_data ( file_path ) try : row = rows [ index ] except IndexError : typer . secho ( f \"Error: Index { index } is out of bounds\" , fg = StatusColor . ERROR . value , err = True , ) raise typer . Exit ( code = ExitCode . ERROR . value ) else : typer . secho ( pprint . pformat ( row , indent = 2 )) Get row at INDEX in FILE_PATH. list_ ( key , file_path =< typer . models . ArgumentInfo object at 0x7f89d4a975c0 > ) \u00b6 Show source code in yamltable/__main__.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @app . command ( name = \"list\" ) def list_ ( key : str , file_path : pathlib . Path = FileArg ) -> None : \"\"\"List all dictionary KEY values in FILE_PATH.\"\"\" rows , _ = load_data ( file_path ) for idx , row in enumerate ( rows ): try : typer . secho ( row [ key ]) except KeyError : typer . secho ( f \"Error: Row { idx } does not have key { key } \" , fg = StatusColor . ERROR . value , err = True , ) raise typer . Exit ( code = ExitCode . ERROR . value ) List all dictionary KEY values in FILE_PATH. load_data ( file_path ) \u00b6 Show source code in yamltable/__main__.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def load_data ( file_path : pathlib . Path ) -> Tuple [ List [ Row ], Optional [ Schema ]]: \"\"\"Attempt to load data from YAML file. Args: file_path: YAML file path Returns: YAML row data, YAML schema \"\"\" try : return yamltable . read ( file_path ) except ( FileNotFoundError , TypeError ) as xcpt : typer . secho ( f \"Error: { xcpt } \" , fg = StatusColor . ERROR . value , err = True ) raise typer . Exit ( code = ExitCode . ERROR . value ) Attempt to load data from YAML file. Parameters Name Type Description Default file_path Path YAML file path required Returns Type Description Tuple[List[Dict[str, Any]], Union[Dict[str, Any], NoneType]] YAML row data, YAML schema search ( key , value , file_path =< typer . models . ArgumentInfo object at 0x7f89d4a975c0 > ) \u00b6 Show source code in yamltable/__main__.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @app . command () def search ( key : str , value : str , file_path : pathlib . Path = FileArg ) -> None : \"\"\"Search dictionaries in FILE_PATH with matching KEY and VALUE pairs.\"\"\" rows , _ = load_data ( file_path ) matches = yamltable . search ( key , value , rows ) if matches : for match in yamltable . search ( key , value , rows ): typer . secho ( pprint . pformat ( match , indent = 2 )) else : typer . secho ( f \"No rows found with (key= { key } , value= { value } ) pair.\" , fg = StatusColor . EMPTY . value , ) Search dictionaries in FILE_PATH with matching KEY and VALUE pairs. sort ( key , file_path =< typer . models . ArgumentInfo object at 0x7f89d4a975c0 > ) \u00b6 Show source code in yamltable/__main__.py 93 94 95 96 97 98 99 100 101 102 103 104 @app . command () def sort ( key : str , file_path : pathlib . Path = FileArg ) -> None : \"\"\"Sort dictionaries in FILE_PATH by KEY values.\"\"\" rows , schema = load_data ( file_path ) try : sorted_rows = yamltable . sort ( key , rows ) except TypeError as xcpt : typer . secho ( f \"Error: { xcpt } \" , fg = StatusColor . ERROR . value , err = True ) raise typer . Exit ( code = ExitCode . ERROR . value ) else : yamltable . write ( file_path , sorted_rows , schema ) Sort dictionaries in FILE_PATH by KEY values. validate ( file_path =< typer . models . ArgumentInfo object at 0x7f89d4a975c0 > ) \u00b6 Show source code in yamltable/__main__.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @app . command () def validate ( file_path : pathlib . Path = FileArg ) -> None : \"\"\"Check that every dictionary in FILE_PATH has conforms to its schema.\"\"\" rows , schema = load_data ( file_path ) valid , row , msg = yamltable . validate ( rows , schema ) if valid : typer . secho ( \"YAML file rows conform to its schema\" , fg = StatusColor . SUCCESS . value ) elif row == - 1 : typer . secho ( f \"Invalid schema: { msg } \" , fg = StatusColor . ERROR . value , err = True ) raise typer . Exit ( code = ExitCode . ERROR . value ) else : typer . secho ( f \"Invalid row { row } : { msg } \" , fg = StatusColor . ERROR . value , err = True ) raise typer . Exit ( code = ExitCode . INVALID . value ) Check that every dictionary in FILE_PATH has conforms to its schema. typing \u00b6 Library types for YamlTable. ExitCode \u00b6 Exit code statuses. StatusColor \u00b6 Colors for message types.","title":"API Reference"},{"location":"src/reference/#api-reference","text":"While YamlTable was designed for command line usage, its library functions also expose helpful functionality. This page gives an overview of all YamlTable classes, functions and methods. Command line interface for sorting YAML files.","title":"API Reference"},{"location":"src/reference/#yamltable.dependencies","text":"Show source code in yamltable/__init__.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 def dependencies ( unsorted : Sequence [ Row ], depends : str , name : str ) -> List [ Row ]: \"\"\"Sort rows based on the dependencies found in key. Args: unsorted: Rows to sort. depends: Dictionary key whose values are other dictionary dependencies. name: Foreign key for dependencies. Raises: ValueError: If rows contain circular requirements. Returns: Rows sorted by requirements. \"\"\" sorted_ : List [ Row ] = [] while unsorted : # Find rows containing only dependencies in sorted_. names = [ pkg [ name ] for pkg in sorted_ ] rows = [ ( idx , pkg ) for idx , pkg in enumerate ( unsorted ) if set ( pkg [ depends ]) . issubset ( names ) ] if rows : idxs , pkgs = zip ( * rows ) # Append found rows to sorted_ and remove them from unsorted. sorted_ += pkgs unsorted = [ elem for idx , elem in enumerate ( unsorted ) if idx not in idxs ] else : # If no rows are found then there exist circular dependencies. raise ValueError ( \"encountered circular dependencies.\" ) return sorted_ Sort rows based on the dependencies found in key. Parameters Name Type Description Default unsorted Sequence[Dict[str, Any]] Rows to sort. required depends str Dictionary key whose values are other dictionary dependencies. required name str Foreign key for dependencies. required Exceptions Type Description ValueError If rows contain circular requirements. Returns Type Description List[Dict[str, Any]] Rows sorted by requirements.","title":"dependencies()"},{"location":"src/reference/#yamltable.read","text":"Show source code in yamltable/__init__.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def read ( stream : Union [ IO [ str ], pathlib . Path , str ] ) -> Tuple [ List [ Row ], Optional [ Schema ]]: \"\"\"Read data from YAML file. Args: stream: YAML text, text I/O stream, or file path. Raises: FileNotFoundError: If unable to find file path. TypeError: If file is not organized as a list. Returns: YAML data. \"\"\" if isinstance ( stream , pathlib . Path ): stream = stream . read_text () try : data = yaml . safe_load ( stream ) except ( yaml . scanner . ScannerError , yaml . parser . ParserError ) as xcpt : raise TypeError ( f \"invalid YAML file: { xcpt } \" ) if isinstance ( data , list ): return data , None elif isinstance ( data , dict ): try : return data [ \"rows\" ], data [ \"schema\" ] except KeyError : raise TypeError ( \"YAML file does not have a schema and rows organization\" ) else : raise TypeError ( \"YAML file is not organized in a tabular format\" ) Read data from YAML file. Parameters Name Type Description Default stream Union[IO[str], pathlib.Path, str] YAML text, text I/O stream, or file path. required Exceptions Type Description FileNotFoundError If unable to find file path. TypeError If file is not organized as a list. Returns Type Description Tuple[List[Dict[str, Any]], Union[Dict[str, Any], NoneType]] YAML data.","title":"read()"},{"location":"src/reference/#yamltable.search","text":"Show source code in yamltable/__init__.py 91 92 93 94 95 96 97 98 99 100 101 102 def search ( key : str , val : Any , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Search dictionaries by key and value. Args: key: Search key. val: Key comparison value. rows: Dictionaries to search. Returns: Matching dictionaries. \"\"\" return [ row for row in rows if key in row and row [ key ] == val ] Search dictionaries by key and value. Parameters Name Type Description Default key str Search key. required val Any Key comparison value. required rows Iterable[Dict[str, Any]] Dictionaries to search. required Returns Type Description List[Dict[str, Any]] Matching dictionaries.","title":"search()"},{"location":"src/reference/#yamltable.sort","text":"Show source code in yamltable/__init__.py 105 106 107 108 109 110 111 112 113 114 115 def sort ( key : str , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Sort dictionaries based on value for supplied key name. Args: key: Search key. rows: Dictionaries to sort. Returns: List of sorted dictionaries. \"\"\" return sorted ( rows , key = lambda row : row [ key ]) Sort dictionaries based on value for supplied key name. Parameters Name Type Description Default key str Search key. required rows Iterable[Dict[str, Any]] Dictionaries to sort. required Returns Type Description List[Dict[str, Any]] List of sorted dictionaries.","title":"sort()"},{"location":"src/reference/#yamltable.validate","text":"Show source code in yamltable/__init__.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def validate ( rows : Iterable [ Row ], schema : Optional [ Schema ] ) -> Tuple [ bool , int , str ]: \"\"\"Check that each row satisfies the schema. Args: rows: Dictionaries to validate. schema: JSON schema for validation. Returns: Whether all rows are valid, invalid row index or -1, invalid error message. \"\"\" try : validator = fastjsonschema . compile ( schema ) except ( fastjsonschema . JsonSchemaDefinitionException , TypeError ) as xcpt : return False , - 1 , f \"invalid schema: { xcpt } \" for idx , row in enumerate ( rows ): try : validator ( row ) except fastjsonschema . JsonSchemaException as xcpt : return False , idx , str ( xcpt ) return True , - 1 , \"\" Check that each row satisfies the schema. Parameters Name Type Description Default rows Iterable[Dict[str, Any]] Dictionaries to validate. required schema Optional[Dict[str, Any]] JSON schema for validation. required Returns Type Description Tuple[bool, int, str] Whether all rows are valid, invalid row index or -1, invalid error message.","title":"validate()"},{"location":"src/reference/#yamltable.write","text":"Show source code in yamltable/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def write ( file_path : pathlib . Path , rows : List [ Row ], schema : Optional [ Schema ] = None , sort_keys : bool = False , ) -> None : \"\"\"Write data to YAML file. Args: file_path: YAML file path. rows: List of dictionaries to write. schema: JSON schema dictionary. sort_keys: Whether to sort row keys. \"\"\" if schema is None : with open ( file_path , \"w\" ) as handle : yaml . dump ( rows , handle , sort_keys = sort_keys ) else : data = { \"schema\" : schema , \"rows\" : rows } with open ( file_path , \"w\" ) as handle : yaml . dump ( data , handle , sort_keys = sort_keys ) Write data to YAML file. Parameters Name Type Description Default file_path Path YAML file path. required rows List[Dict[str, Any]] List of dictionaries to write. required schema Optional[Dict[str, Any]] JSON schema dictionary. None sort_keys bool Whether to sort row keys. False","title":"write()"},{"location":"src/reference/#yamltable.typing","text":"Library types for YamlTable.","title":"typing"},{"location":"src/reference/#yamltable.typing.ExitCode","text":"Exit code statuses.","title":"ExitCode"},{"location":"src/reference/#yamltable.typing.StatusColor","text":"Colors for message types.","title":"StatusColor"},{"location":"src/user/","text":"User Guide \u00b6 The user","title":"User Guide"},{"location":"src/user/#user-guide","text":"The user","title":"User Guide"},{"location":"src/user/cli/","text":"CLI \u00b6 Utility for working with YAML files organized similar to a relational database table. Usage : 1 $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : index : Get row at INDEX in FILE_PATH. list : List all dictionary KEY values in FILE_PATH. search : Search dictionaries in FILE_PATH with... sort : Sort dictionaries in FILE_PATH by KEY values. validate : Check that every dictionary in FILE_PATH has... index \u00b6 Get row at INDEX in FILE_PATH. Usage : 1 $ index [ OPTIONS ] INDEX FILE_PATH Options : --help : Show this message and exit. list \u00b6 List all dictionary KEY values in FILE_PATH. Usage : 1 $ list [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit. search \u00b6 Search dictionaries in FILE_PATH with matching KEY and VALUE pairs. Usage : 1 $ search [ OPTIONS ] KEY VALUE FILE_PATH Options : --help : Show this message and exit. sort \u00b6 Sort dictionaries in FILE_PATH by KEY values. Usage : 1 $ sort [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit. validate \u00b6 Check that every dictionary in FILE_PATH has conforms to its schema. Usage : 1 $ validate [ OPTIONS ] FILE_PATH Options : --help : Show this message and exit.","title":"CLI"},{"location":"src/user/cli/#cli","text":"Utility for working with YAML files organized similar to a relational database table. Usage : 1 $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : index : Get row at INDEX in FILE_PATH. list : List all dictionary KEY values in FILE_PATH. search : Search dictionaries in FILE_PATH with... sort : Sort dictionaries in FILE_PATH by KEY values. validate : Check that every dictionary in FILE_PATH has...","title":"CLI"},{"location":"src/user/cli/#index","text":"Get row at INDEX in FILE_PATH. Usage : 1 $ index [ OPTIONS ] INDEX FILE_PATH Options : --help : Show this message and exit.","title":"index"},{"location":"src/user/cli/#list","text":"List all dictionary KEY values in FILE_PATH. Usage : 1 $ list [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit.","title":"list"},{"location":"src/user/cli/#search","text":"Search dictionaries in FILE_PATH with matching KEY and VALUE pairs. Usage : 1 $ search [ OPTIONS ] KEY VALUE FILE_PATH Options : --help : Show this message and exit.","title":"search"},{"location":"src/user/cli/#sort","text":"Sort dictionaries in FILE_PATH by KEY values. Usage : 1 $ sort [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit.","title":"sort"},{"location":"src/user/cli/#validate","text":"Check that every dictionary in FILE_PATH has conforms to its schema. Usage : 1 $ validate [ OPTIONS ] FILE_PATH Options : --help : Show this message and exit.","title":"validate"},{"location":"src/user/install/","text":"Install \u00b6 Installing Python \u00b6 YamlTable requires Python 3.6+ as a dependency. You can download Python from their official site . If you need to manage multiple Python versions, pyenv is recommended for Linux or macOs, and pyenv-win is recommended for Windows. Installing YamlTable \u00b6 YamlTable can be installed with the PIP package manager. 1 pip install --user yamltable If you receive a script warning about the install location not being found on your PATH , then add the install location to your PATH environment variable. Diving In \u00b6 Once YamlTable is installed, you can try it out from the command line with yamltable --help or import it in a Python script with import yamltable . For instructions about using YamlTable from the command line, visit the CLI guide . For instructions about using YamlTable as a Python library, visit the library guide or the API reference .","title":"Install"},{"location":"src/user/install/#install","text":"","title":"Install"},{"location":"src/user/install/#installing-python","text":"YamlTable requires Python 3.6+ as a dependency. You can download Python from their official site . If you need to manage multiple Python versions, pyenv is recommended for Linux or macOs, and pyenv-win is recommended for Windows.","title":"Installing Python"},{"location":"src/user/install/#installing-yamltable","text":"YamlTable can be installed with the PIP package manager. 1 pip install --user yamltable If you receive a script warning about the install location not being found on your PATH , then add the install location to your PATH environment variable.","title":"Installing YamlTable"},{"location":"src/user/install/#diving-in","text":"Once YamlTable is installed, you can try it out from the command line with yamltable --help or import it in a Python script with import yamltable . For instructions about using YamlTable from the command line, visit the CLI guide . For instructions about using YamlTable as a Python library, visit the library guide or the API reference .","title":"Diving In"}]}