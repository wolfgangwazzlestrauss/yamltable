{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"YamlTable \u00b6 YamlTable is a Python command line utility for working with YAML files organized similar to a relational database table. It supports YAML files organized as a list of dictionaries, which share key names and value types. YamlTable provides commands for listing, searching, sorting, etc. data from the supported files. Supported YAML File Organizations \u00b6 YamlTable works with YAML files organized as a list of dictionaries with similar key names and value types. 1 2 3 4 5 6 - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances The JSON schema support is included for YAML files organized as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 schema : $schema : http://json-schema.org/draft-07/schema# description : pipx package metadata schema type : object properties : name : type : string pattern : \"^[\\\\w-]+$\" description : type : string website : type : string required : - name - description - website additionalProperties : false rows : - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances Getting Started \u00b6 Installation \u00b6 YamlTable can be installed for Python 3.6+ with pipx . 1 pipx install yamltable To reuse its library functions install with pip . 1 pip install --user yamltable Commands \u00b6 YamlTable provides the following commands for working with YAML files: list : list dictionary key values search : search dictionaries by key and value sort : sort dictionaries by key and value validate : validate that dictionaries conform to the given JSON schema Contributing \u00b6 Since YamlTable is in an early development phase, it is not currently open to contributors. License \u00b6 Licensed under the MIT license.","title":"Home"},{"location":"#yamltable","text":"YamlTable is a Python command line utility for working with YAML files organized similar to a relational database table. It supports YAML files organized as a list of dictionaries, which share key names and value types. YamlTable provides commands for listing, searching, sorting, etc. data from the supported files.","title":"YamlTable"},{"location":"#supported-yaml-file-organizations","text":"YamlTable works with YAML files organized as a list of dictionaries with similar key names and value types. 1 2 3 4 5 6 - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances The JSON schema support is included for YAML files organized as: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 schema : $schema : http://json-schema.org/draft-07/schema# description : pipx package metadata schema type : object properties : name : type : string pattern : \"^[\\\\w-]+$\" description : type : string website : type : string required : - name - description - website additionalProperties : false rows : - name : awscli description : Amazon Web Services command line client website : https://aws.amazon.com/ - name : glances description : operating system monitoring interface website : https://github.com/nicolargo/glances","title":"Supported YAML File Organizations"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#installation","text":"YamlTable can be installed for Python 3.6+ with pipx . 1 pipx install yamltable To reuse its library functions install with pip . 1 pip install --user yamltable","title":"Installation"},{"location":"#commands","text":"YamlTable provides the following commands for working with YAML files: list : list dictionary key values search : search dictionaries by key and value sort : sort dictionaries by key and value validate : validate that dictionaries conform to the given JSON schema","title":"Commands"},{"location":"#contributing","text":"Since YamlTable is in an early development phase, it is not currently open to contributors.","title":"Contributing"},{"location":"#license","text":"Licensed under the MIT license.","title":"License"},{"location":"cli/","text":"CLI \u00b6 Utility for working with YAML files organized similar to a relational database table. Usage : 1 $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : index : Get row at INDEX in FILE_PATH. list : List all dictionary KEY values in FILE_PATH. search : Search dictionaries in FILE_PATH with... sort : Sort dictionaries in FILE_PATH by KEY values. validate : Check that every dictionary in FILE_PATH has... index \u00b6 Get row at INDEX in FILE_PATH. Usage : 1 $ index [ OPTIONS ] INDEX FILE_PATH Options : --help : Show this message and exit. list \u00b6 List all dictionary KEY values in FILE_PATH. Usage : 1 $ list [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit. search \u00b6 Search dictionaries in FILE_PATH with matching KEY and VALUE pairs. Usage : 1 $ search [ OPTIONS ] KEY VALUE FILE_PATH Options : --help : Show this message and exit. sort \u00b6 Sort dictionaries in FILE_PATH by KEY values. Usage : 1 $ sort [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit. validate \u00b6 Check that every dictionary in FILE_PATH has conforms to its schema. Usage : 1 $ validate [ OPTIONS ] FILE_PATH Options : --help : Show this message and exit.","title":"CLI"},{"location":"cli/#cli","text":"Utility for working with YAML files organized similar to a relational database table. Usage : 1 $ [ OPTIONS ] COMMAND [ ARGS ] ... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : index : Get row at INDEX in FILE_PATH. list : List all dictionary KEY values in FILE_PATH. search : Search dictionaries in FILE_PATH with... sort : Sort dictionaries in FILE_PATH by KEY values. validate : Check that every dictionary in FILE_PATH has...","title":"CLI"},{"location":"cli/#index","text":"Get row at INDEX in FILE_PATH. Usage : 1 $ index [ OPTIONS ] INDEX FILE_PATH Options : --help : Show this message and exit.","title":"index"},{"location":"cli/#list","text":"List all dictionary KEY values in FILE_PATH. Usage : 1 $ list [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit.","title":"list"},{"location":"cli/#search","text":"Search dictionaries in FILE_PATH with matching KEY and VALUE pairs. Usage : 1 $ search [ OPTIONS ] KEY VALUE FILE_PATH Options : --help : Show this message and exit.","title":"search"},{"location":"cli/#sort","text":"Sort dictionaries in FILE_PATH by KEY values. Usage : 1 $ sort [ OPTIONS ] KEY FILE_PATH Options : --help : Show this message and exit.","title":"sort"},{"location":"cli/#validate","text":"Check that every dictionary in FILE_PATH has conforms to its schema. Usage : 1 $ validate [ OPTIONS ] FILE_PATH Options : --help : Show this message and exit.","title":"validate"},{"location":"reference/","text":"API \u00b6 While YamlTable was designed for command line usage, its library functions also expose helpful functionality. This page gives an overview of all YamlTable classes, functions and methods. Library functions for YamlTable. read ( file_path ) \u00b6 Show source code in yamltable/lib.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def read ( file_path : pathlib . Path ) -> Tuple [ List [ Row ], Optional [ Schema ]]: \"\"\"Read data from YAML file. Args: file_path: YAML file path Raises: FileNotFoundError: if unable to find file path TypeError: if file is not organized as a list Returns: YAML data \"\"\" try : with open ( file_path , \"r\" ) as handle : data = yaml . safe_load ( handle ) except ( yaml . scanner . ScannerError , yaml . parser . ParserError ) as xcpt : raise TypeError ( f \"invalid YAML file: { xcpt } \" ) if isinstance ( data , list ): return data , None elif isinstance ( data , dict ): try : return data [ \"rows\" ], data [ \"schema\" ] except KeyError : raise TypeError ( \"YAML file does not have a schema and rows organization\" ) else : raise TypeError ( \"YAML file is not organized in a tabular format\" ) Read data from YAML file. Parameters Name Type Description Default file_path Path YAML file path required Exceptions Type Description FileNotFoundError if unable to find file path TypeError if file is not organized as a list Returns Type Description Tuple[List[Dict[str, Any]], Union[Dict[str, Any], NoneType]] YAML data search ( key , val , rows ) \u00b6 Show source code in yamltable/lib.py 45 46 47 48 49 50 51 52 53 54 55 56 57 def search ( key : str , val : Any , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Search dictionaries by key and value. Args: key: search key val: key comparison value rows: dictionaries to search Returns: matching dictionaries \"\"\" return [ row for row in rows if key in row and row [ key ] == val ] Search dictionaries by key and value. Parameters Name Type Description Default key str search key required val Any key comparison value required rows Iterable[Dict[str, Any]] dictionaries to search required Returns Type Description List[Dict[str, Any]] matching dictionaries sort ( key , rows ) \u00b6 Show source code in yamltable/lib.py 60 61 62 63 64 65 66 67 68 69 70 71 def sort ( key : str , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Sort dictionaries based on value for supplied key name. Args: key: search key rows: dictionaries to sort Returns: list of sorted dictionaries \"\"\" return sorted ( rows , key = lambda row : row [ key ]) Sort dictionaries based on value for supplied key name. Parameters Name Type Description Default key str search key required rows Iterable[Dict[str, Any]] dictionaries to sort required Returns Type Description List[Dict[str, Any]] list of sorted dictionaries validate ( rows , schema ) \u00b6 Show source code in yamltable/lib.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def validate ( rows : Iterable [ Row ], schema : Optional [ Schema ] ) -> Tuple [ bool , int , str ]: \"\"\"Check that each row satisfies the schema. Args: rows: Dictionaries to validate. schema: JSON schema for validation. Returns: Whether all rows are valid, invalid row index or -1, invalid error message. \"\"\" try : validator = fastjsonschema . compile ( schema ) except ( fastjsonschema . JsonSchemaDefinitionException , TypeError ) as xcpt : return False , - 1 , f \"invalid schema: { xcpt } \" for idx , row in enumerate ( rows ): try : validator ( row ) except fastjsonschema . JsonSchemaException as xcpt : return False , idx , xcpt . message return True , - 1 , \"\" Check that each row satisfies the schema. Parameters Name Type Description Default rows Iterable[Dict[str, Any]] Dictionaries to validate. required schema Optional[Dict[str, Any]] JSON schema for validation. required Returns Type Description Tuple[bool, int, str] Whether all rows are valid, invalid row index or -1, invalid error message. write ( file_path , rows , schema = None , sort_keys = False ) \u00b6 Show source code in yamltable/lib.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def write ( file_path : pathlib . Path , rows : List [ Row ], schema : Optional [ Schema ] = None , sort_keys : bool = False , ) -> None : \"\"\"Write data to YAML file. Args: file_path: YAML file path rows: list of dictionaries to write schema: JSON schema dictionary sort_keys: whether to sort row keys \"\"\" if schema is None : with open ( file_path , \"w\" ) as handle : yaml . dump ( rows , handle , sort_keys = sort_keys ) else : data = { \"schema\" : schema , \"rows\" : rows } with open ( file_path , \"w\" ) as handle : yaml . dump ( data , handle , sort_keys = sort_keys ) Write data to YAML file. Parameters Name Type Description Default file_path Path YAML file path required rows List[Dict[str, Any]] list of dictionaries to write required schema Optional[Dict[str, Any]] JSON schema dictionary None sort_keys bool whether to sort row keys False","title":"Reference"},{"location":"reference/#api","text":"While YamlTable was designed for command line usage, its library functions also expose helpful functionality. This page gives an overview of all YamlTable classes, functions and methods. Library functions for YamlTable.","title":"API"},{"location":"reference/#yamltable.lib.read","text":"Show source code in yamltable/lib.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def read ( file_path : pathlib . Path ) -> Tuple [ List [ Row ], Optional [ Schema ]]: \"\"\"Read data from YAML file. Args: file_path: YAML file path Raises: FileNotFoundError: if unable to find file path TypeError: if file is not organized as a list Returns: YAML data \"\"\" try : with open ( file_path , \"r\" ) as handle : data = yaml . safe_load ( handle ) except ( yaml . scanner . ScannerError , yaml . parser . ParserError ) as xcpt : raise TypeError ( f \"invalid YAML file: { xcpt } \" ) if isinstance ( data , list ): return data , None elif isinstance ( data , dict ): try : return data [ \"rows\" ], data [ \"schema\" ] except KeyError : raise TypeError ( \"YAML file does not have a schema and rows organization\" ) else : raise TypeError ( \"YAML file is not organized in a tabular format\" ) Read data from YAML file. Parameters Name Type Description Default file_path Path YAML file path required Exceptions Type Description FileNotFoundError if unable to find file path TypeError if file is not organized as a list Returns Type Description Tuple[List[Dict[str, Any]], Union[Dict[str, Any], NoneType]] YAML data","title":"read()"},{"location":"reference/#yamltable.lib.search","text":"Show source code in yamltable/lib.py 45 46 47 48 49 50 51 52 53 54 55 56 57 def search ( key : str , val : Any , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Search dictionaries by key and value. Args: key: search key val: key comparison value rows: dictionaries to search Returns: matching dictionaries \"\"\" return [ row for row in rows if key in row and row [ key ] == val ] Search dictionaries by key and value. Parameters Name Type Description Default key str search key required val Any key comparison value required rows Iterable[Dict[str, Any]] dictionaries to search required Returns Type Description List[Dict[str, Any]] matching dictionaries","title":"search()"},{"location":"reference/#yamltable.lib.sort","text":"Show source code in yamltable/lib.py 60 61 62 63 64 65 66 67 68 69 70 71 def sort ( key : str , rows : Iterable [ Row ]) -> List [ Row ]: \"\"\"Sort dictionaries based on value for supplied key name. Args: key: search key rows: dictionaries to sort Returns: list of sorted dictionaries \"\"\" return sorted ( rows , key = lambda row : row [ key ]) Sort dictionaries based on value for supplied key name. Parameters Name Type Description Default key str search key required rows Iterable[Dict[str, Any]] dictionaries to sort required Returns Type Description List[Dict[str, Any]] list of sorted dictionaries","title":"sort()"},{"location":"reference/#yamltable.lib.validate","text":"Show source code in yamltable/lib.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def validate ( rows : Iterable [ Row ], schema : Optional [ Schema ] ) -> Tuple [ bool , int , str ]: \"\"\"Check that each row satisfies the schema. Args: rows: Dictionaries to validate. schema: JSON schema for validation. Returns: Whether all rows are valid, invalid row index or -1, invalid error message. \"\"\" try : validator = fastjsonschema . compile ( schema ) except ( fastjsonschema . JsonSchemaDefinitionException , TypeError ) as xcpt : return False , - 1 , f \"invalid schema: { xcpt } \" for idx , row in enumerate ( rows ): try : validator ( row ) except fastjsonschema . JsonSchemaException as xcpt : return False , idx , xcpt . message return True , - 1 , \"\" Check that each row satisfies the schema. Parameters Name Type Description Default rows Iterable[Dict[str, Any]] Dictionaries to validate. required schema Optional[Dict[str, Any]] JSON schema for validation. required Returns Type Description Tuple[bool, int, str] Whether all rows are valid, invalid row index or -1, invalid error message.","title":"validate()"},{"location":"reference/#yamltable.lib.write","text":"Show source code in yamltable/lib.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def write ( file_path : pathlib . Path , rows : List [ Row ], schema : Optional [ Schema ] = None , sort_keys : bool = False , ) -> None : \"\"\"Write data to YAML file. Args: file_path: YAML file path rows: list of dictionaries to write schema: JSON schema dictionary sort_keys: whether to sort row keys \"\"\" if schema is None : with open ( file_path , \"w\" ) as handle : yaml . dump ( rows , handle , sort_keys = sort_keys ) else : data = { \"schema\" : schema , \"rows\" : rows } with open ( file_path , \"w\" ) as handle : yaml . dump ( data , handle , sort_keys = sort_keys ) Write data to YAML file. Parameters Name Type Description Default file_path Path YAML file path required rows List[Dict[str, Any]] list of dictionaries to write required schema Optional[Dict[str, Any]] JSON schema dictionary None sort_keys bool whether to sort row keys False","title":"write()"}]}